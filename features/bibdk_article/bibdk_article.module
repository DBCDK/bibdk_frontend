<?php
/**
 * @file
 * Code for the bibdk_article feature.
 */

include_once 'bibdk_article.features.inc';

/*
 * Implements hook_block_info
 */
function bibdk_article_block_info(){
  
  $blocks['bibdk_articles'] = array(
    'info' => t('Bibdk Article Frontpage teaser'), 
  );
  
  return $blocks;
}

/*
 * Implements hook_block_view
 */
function bibdk_article_block_view($delta = ''){
   $block = array();
  switch ($delta) {
    case 'bibdk_articles':
      if (user_access('access content')) {
        $block['subject'] = t('Recent content');
        if ($articles = bibdk_article_get_block_posts()) {
          $block['content'] = array(
            '#theme' => 'bibdk_articles_block', 
            '#articles' => $articles,
          );
        }
        else {
          $block['content'] = t('No content available.');
        }
      }
      break;
  }
  return $block;
  $articles = _bibdk_article_get_block_posts();
  drupal_render($articles);
}

/*
 * Implements hook_block_configure
 */
function bibdk_article_block_configure($delta = ''){
}

/*
 * Implements hook_theme
 */
function bibdk_article_theme(){
  $themes = array(
    'bibdk_articles_block' => array(
      'variables' => array('articles' => NULL),
      'template' => 'theme/bibdk-articles-block'
    ), 
    'bibdk_articles_block_widget' => array(
      'variables' => array(
        'title' => NULL, 
        'body' => NULL, 
        'link' => NULL, 
        'class' => NULL, 
        'rows' => NULL, 
        ),
      'template' => 'theme/bibdk-articles-block-widget'
    ), 
  );
  return $themes;
}

/*
 * Fetch nodes of type bibdk_article from db
 */
function bibdk_article_get_block_posts(){
  //http://api.drupal.org/api/drupal/includes%21common.inc/function/entity_load/7
   $query = new EntityFieldQuery();

  $query
    ->entityCondition('entity_type', 'node', '=')
    ->propertyCondition('type', 'bibdk_article', '=')
    ->propertyCondition('status', '1', '=');
  
  $result = $query->execute();
  $ids = array();
  foreach($result['node'] as $record) {
    $ids[] = $record->nid;
  }
  $articles = entity_load('node', $ids);
  foreach($articles as $article){
    $placement = isset($article->field_layout_placement['und'][0])? $article->field_layout_placement['und'][0]['value'] : 1;
    $classes = bibdk_article_get_classes($article->field_layout_columns['und'][0]['value'], $article->field_layout_rows['und'][0]['value']);
    $article_render_array = array(
      'title' => $article->title,
      'body' => isset($article->body['und'][0])? $article->body['und'][0]['value'] : "",
      'link' => isset($article->field_bibdk_article_link['und'][0]['value']) ? $article->field_bibdk_article_link['und'][0]['value'] : "",
      'link_text' => isset($article->field_bibdk_article_link_text['und'][0])? $article->field_bibdk_article_link_text['und'][0]['value'] : "Read more",
      'class' => $classes['height'],
      'rows' =>  $article->field_layout_rows['und'][0]['value'],
    );
    if (empty($columns[$placement]['width']))
      $columns[$placement]['width'] = $classes['width'];
    
    $columns[$placement]['articles'][] = theme('bibdk_articles_block_widget', $article_render_array);
  }
  ksort($columns);
  return $columns;
}

/*
 * Add necessary classes for bibdk_theme
 */
function bibdk_article_get_classes($columns, $rows){
  $classes = array(
    'width' => ($columns == 2) ? 'grid_9' : 'grid_5',
    'height' => ($rows == 2) ? 'widget-light-grey widget-height-'.$rows : 'widget-dark-grey widget-height-'.$rows
  );
  return $classes;
}